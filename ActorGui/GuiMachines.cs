// Autogenerated with DRAKON Editor 1.31
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Diagnostics;

using Actors;

namespace ActorGui {

public class GuiMachines {



    public partial class MainWindowLogic
        : IActor
    {
        // Arguments
        internal IMainWindow Window;
        // State
        internal int Worker;
        internal WebClient Web;

        public enum StateNames {
            Destroyed,
            Ready,
            Calculating,
            Downloading
        }

        private StateNames _state = StateNames.Ready;

        public StateNames State {
            get { return _state; }
            internal set { _state = value; }
        }

        public const int CompletedMessage = CallResult.Completed;
        public const int ErrorMessage = CallResult.Error;
        public const int CancelMessage = Codes.Cancel;
        public const int DownloadMessage = GuiConstants.Download;
        public const int PrimeMessage = GuiConstants.Prime;

        public object OnMessage(int messageType, IRuntime runtime, int myId, Message message) {
            switch (messageType) {
                case CompletedMessage:
                    return Completed(runtime, myId, message);
                case ErrorMessage:
                    return Error(runtime, myId, message);
                case CancelMessage:
                    return Cancel(runtime, myId, message);
                case DownloadMessage:
                    return Download(runtime, myId, message);
                case PrimeMessage:
                    return Prime(runtime, myId, message);
                default:
                    return null;
            }
        }

        public object Completed(IRuntime runtime, int myId, Message message) {
            switch (State) {
                case StateNames.Ready:
                case StateNames.Calculating:
                    return Calculating_Completed(runtime, myId, message);
                case StateNames.Downloading:
                    return Downloading_Completed(runtime, myId, message);
                default:
                    return null;
            }
        }

        public object Error(IRuntime runtime, int myId, Message message) {
            switch (State) {
                case StateNames.Ready:
                case StateNames.Calculating:
                    return Calculating_Error(runtime, myId, message);
                case StateNames.Downloading:
                    return Downloading_Error(runtime, myId, message);
                default:
                    return null;
            }
        }

        public object Cancel(IRuntime runtime, int myId, Message message) {
            switch (State) {
                case StateNames.Ready:
                case StateNames.Calculating:
                    return Calculating_Cancel(runtime, myId, message);
                case StateNames.Downloading:
                    return Downloading_Cancel(runtime, myId, message);
                default:
                    return null;
            }
        }

        public object Download(IRuntime runtime, int myId, Message message) {
            switch (State) {
                case StateNames.Ready:
                    return Ready_Download(runtime, myId, message);
                case StateNames.Calculating:
                case StateNames.Downloading:
                default:
                    return null;
            }
        }

        public object Prime(IRuntime runtime, int myId, Message message) {
            switch (State) {
                case StateNames.Ready:
                    return Ready_Prime(runtime, myId, message);
                case StateNames.Calculating:
                case StateNames.Downloading:
                default:
                    return null;
            }
        }

        private object Ready_Download(IRuntime runtime, int myId, Message message) {
            // item 88
            string url = (string)message.Payload;
            // item 93
            Debug.WriteLine(url);
            // item 244
            Web = StartDownload(
            	runtime,
            	url,
            	myId
            );
            // item 90
            Window.SwitchToWorking();
            // item 92
            State = StateNames.Downloading;
            return null;
        }

        private object Ready_Prime(IRuntime runtime, int myId, Message message) {
            // item 89
            int n = (int)message.Payload;
            // item 94
            Debug.WriteLine(n);
            // item 232
            var calculator = new PrimeCalculator();
            calculator.Client = myId;
            calculator.N = n;
            
            
            Worker = runtime.AddDedicatedActor(
            	calculator
            );
            // item 91
            Window.SwitchToWorking();
            // item 73
            State = StateNames.Calculating;
            return null;
        }

        private object Calculating_Completed(IRuntime runtime, int myId, Message message) {
            // item 116
            Window.SwitchToReady();
            // item 231
            Window.ReportResult(
            	(string)message.Payload
            );
            // item 82
            State = StateNames.Ready;
            return null;
        }

        private object Calculating_Error(IRuntime runtime, int myId, Message message) {
            // item 233
            Window.SwitchToReady();
            // item 113
            ReportError(
            	Window,
            	"Calculation failed",
            	message
            );
            // item 82
            State = StateNames.Ready;
            return null;
        }

        private object Calculating_Cancel(IRuntime runtime, int myId, Message message) {
            // item 235
            Window.SwitchToReady();
            // item 234
            runtime.RemoveActor(Worker);
            // item 82
            State = StateNames.Ready;
            return null;
        }

        private object Downloading_Completed(IRuntime runtime, int myId, Message message) {
            // item 236
            Window.SwitchToReady();
            // item 246
            byte[] data = (byte[])message.Payload;
            // item 245
            string result = String.Format(
            	"Download completed. Size: {0} bytes.",
            	data.Length
            );
            // item 247
            Window.ReportResult(
            	result
            );
            // item 76
            State = StateNames.Ready;
            return null;
        }

        private object Downloading_Error(IRuntime runtime, int myId, Message message) {
            // item 119
            Window.SwitchToReady();
            // item 120
            ReportError(
            	Window,
            	"Download failed",
            	message
            );
            // item 76
            State = StateNames.Ready;
            return null;
        }

        private object Downloading_Cancel(IRuntime runtime, int myId, Message message) {
            // item 237
            Window.SwitchToReady();
            // item 266
            if (Web == null) {
                
            } else {
                // item 265
                Web.CancelAsync();
                Web = null;
            }
            // item 76
            State = StateNames.Ready;
            return null;
        }

        public void Shutdown() {
            if (State == StateNames.Destroyed) {
                return;
            }
            State = StateNames.Destroyed;
            
        }
    }

    public partial class PrimeCalculator
        : IActor
    {
        const int ChunkSize = 1000;
        // Arguments.
        internal int N;
        internal int Client; // The actor that ordered the computation.
        // State
        internal readonly List<int> Primes = new List<int>();
        internal int Current; // The current candidate.
        internal int J;

        public enum StateNames {
            Destroyed,
            EasyChecks,
            Calculation
        }

        private StateNames _state = StateNames.EasyChecks;

        public StateNames State {
            get { return _state; }
            internal set { _state = value; }
        }

        public const int PulseMessage = Codes.Pulse;

        public object OnMessage(int messageType, IRuntime runtime, int myId, Message message) {
            switch (messageType) {
                case PulseMessage:
                    return Pulse(runtime, myId, message);
                default:
                    return null;
            }
        }

        public object Pulse(IRuntime runtime, int myId, Message message) {
            switch (State) {
                case StateNames.EasyChecks:
                    return EasyChecks_Pulse(runtime, myId, message);
                case StateNames.Calculation:
                    return Calculation_Pulse(runtime, myId, message);
                default:
                    return null;
            }
        }

        private object EasyChecks_Pulse(IRuntime runtime, int myId, Message message) {
            // item 1980001
            if (N == 0) {
                // item 215
                ReportPrimes(
                	runtime,
                	Primes,
                	N,
                	Client
                );
                // item 156
                Shutdown();
                return null;
            } else {
                // item 1980002
                if (N == 1) {
                    // item 211
                    Primes.Add(1);
                    // item 215
                    ReportPrimes(
                    	runtime,
                    	Primes,
                    	N,
                    	Client
                    );
                    // item 156
                    Shutdown();
                    return null;
                } else {
                    // item 1980003
                    if (N == 2) {
                        // item 209
                        Primes.Add(1);
                        Primes.Add(2);
                        // item 215
                        ReportPrimes(
                        	runtime,
                        	Primes,
                        	N,
                        	Client
                        );
                        // item 156
                        Shutdown();
                        return null;
                    } else {
                        // item 1980004
                        if (N < 0) {
                            // item 220
                            runtime.SendMessage(
                            	Client,
                            	CallResult.Error,
                            	new ArgumentException(
                            	  "N",
                            	  "Negative argument"),
                            	myId
                            );
                            // item 156
                            Shutdown();
                            return null;
                        } else {
                            // item 269
                            Primes.Add(1);
                            Primes.Add(2);
                            Primes.Add(3);
                            // item 216
                            Current = 5;
                            J = 3;
                            // item 214
                            State = StateNames.Calculation;
                            return null;
                        }
                    }
                }
            }
        }

        private object EasyChecks_default(IRuntime runtime, int myId, Message message) {
            // item 170
            State = StateNames.EasyChecks;
            return null;
        }

        private object Calculation_Pulse(IRuntime runtime, int myId, Message message) {
            // item 1790001
            int i = 0;
            while (true) {
                // item 1790002
                if (i < ChunkSize) {
                    
                } else {
                    // item 159
                    State = StateNames.Calculation;
                    return null;
                }
                // item 193
                if (Current > N) {
                    // item 230
                    ReportPrimes(
                    	runtime,
                    	Primes,
                    	N,
                    	Client
                    );
                    // item 195
                    Shutdown();
                    return null;
                } else {
                    
                }
                // item 181
                if (J * J > Current) {
                    // item 192
                    Primes.Add(Current);
                    // item 190
                    J = 3;
                    Current += 2;
                } else {
                    // item 185
                    if (Current % J == 0) {
                        // item 190
                        J = 3;
                        Current += 2;
                    } else {
                        // item 184
                        J += 2;
                    }
                }
                // item 1790003
                i++;
            }
        }

        private object Calculation_default(IRuntime runtime, int myId, Message message) {
            // item 178
            State = StateNames.Calculation;
            return null;
        }

        public void Shutdown() {
            if (State == StateNames.Destroyed) {
                return;
            }
            State = StateNames.Destroyed;
            
        }
    }

    private static void DownloadCompleted(IRuntime runtime, int caller, DownloadDataCompletedEventArgs e) {
        // item 255
        if (e.Cancelled) {
            // item 258
            runtime.SendMessage(
            	caller,
            	Codes.Cancel,
            	null,
            	0
            );
        } else {
            // item 259
            if (e.Error == null) {
                // item 262
                runtime.SendMessage(
                	caller,
                	CallResult.Completed,
                	e.Result,
                	0
                );
            } else {
                // item 261
                runtime.SendMessage(
                	caller,
                	CallResult.Error,
                	e.Error,
                	0
                );
            }
        }
    }

    private static void ReportError(IMainWindow Window, string start, Message message) {
        // item 126
        string text;
        Exception ex = message.Payload as Exception;
        // item 128
        if (ex == null) {
            // item 131
            text = start;
        } else {
            // item 127
            text = start + "\n" + ex.Message;
        }
        // item 132
        Window.ReportError(text);
    }

    private static void ReportPrimes(IRuntime runtime, List<int> primes, int n, int client) {
        // item 229
        string[] primesAsText = primes
        	.Select(p => p.ToString())
        	.ToArray();
        // item 226
        string primeString = String.Join(
        	"\n",
        	primesAsText
        );
        // item 227
        string result = String.Format(
        	"Prime numbers up to {0}: {1} found:\n{2}",
        	n,
        	primes.Count,
        	primeString
        );
        // item 228
        runtime.SendMessage(
        	client,
        	CallResult.Completed,
        	result,
        	0
        );
    }

    private static WebClient StartDownload(IRuntime runtime, string url, int receiverId) {
        // item 263
        WebClient web = new WebClient();
        web.DownloadDataCompleted += (sender, e) =>
        {
        	DownloadCompleted(runtime, receiverId, e);
        };
        // item 264
        try {
        	web.DownloadDataAsync(new Uri(url));
        } catch (Exception ex) {
        	runtime.SendMessage(
        		receiverId,
        		CallResult.Error,
        		ex,
        		0
        	);
        }
        // item 249
        return web;
    }
}
}
